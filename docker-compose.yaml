version: '3'

services:
  ai:
    build:
      context: ./AI-grpc
      dockerfile: Dockerfile
    ports:
      - '5001:5001'
      - '50051:50051'
    volumes:
      - ./AI-grpc:/app # Ensure the correct path for your application code
    command: ['python', 'app.py'] # Command to run your AI service
    networks:
      - kafka_network # Ensure this service is part of the same network

  kafka:
    image: apache/kafka:3.8.0
    container_name: kafka-broker
    ports:
      - '9092:9092'
    environment:
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-broker:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka-broker:9093'
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_NODE_ID: 1
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - ./kafka-data:/var/lib/kafka/data
    networks:
      - kafka_network # Ensure this service is part of the same network

  fastify:
    build:
      context: ./Backend
      dockerfile: Dockerfile
    container_name: fastify
    ports:
      - '3010:3010' # Expose Fastify app on port 3010
    depends_on:
      - kafka # Ensure Kafka starts before Fastify
    networks:
      - kafka_network # Ensure this service is part of the same network
    environment:
      KAFKA_BROKER: kafka-broker:9092 # Set Kafka broker address
    volumes:
      - ./Backend:/app # Ensure the correct path for your application code

  cloud-frontend:
    build:
      context: ./Frontend/my-app # Build the image using the Dockerfile in the current directory
    container_name: cloud-frontend # Set a specific name for the container
    ports:
      - '3000:3000' # Map port 3000 on the host to port 3000 in the container
    volumes:
      - ./Frontend/my-app:/app # Mount the current directory to enable hot reloading
    networks:
      - kafka_network # Ensure this service is part of the same network

networks:
  kafka_network:
    driver: bridge
